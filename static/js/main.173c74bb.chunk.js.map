{"version":3,"sources":["contracts/blog_contract_approval.teal","contracts/blog_contract_clear.teal","utils/conversions.js","components/Cover.jsx","components/utils/Identicon.jsx","components/Wallet.jsx","components/blog/AddBlog.jsx","components/blog/EditBlog.jsx","components/blog/ViewPost.jsx","components/blog/Blog.jsx","components/utils/Loader.jsx","components/utils/Notifications.jsx","components/blog/Blogs.jsx","App.js","reportWebVitals.js","index.js","utils/contract.js","utils/constants.js"],"names":["base64ToUTF8String","base64String","Buffer","from","toString","utf8ToBase64String","utf8String","truncateAddress","address","slice","length","microAlgosToString","num","BigNumber","shiftedBy","ALGORAND_DECIMALS","toFixed","Cover","name","coverImg","connect","className","style","maxWidth","src","alt","Button","onClick","variant","Identicon","size","rest","width","height","diameter","seed","parseInt","Wallet","amount","symbol","disconnect","Dropdown","Toggle","align","id","Spinner","animation","Menu","Item","href","target","Stack","direction","gap","Divider","as","AddBlog","createBlog","useState","title","setTitle","image","setImage","content","setContent","isFormFilled","useCallback","show","setShow","handleClose","Modal","onHide","centered","Header","closeButton","Title","Form","Body","FloatingLabel","controlId","label","Control","type","onChange","e","value","placeholder","Footer","disabled","EditBlog","editBlog","blog","ViewBlog","objectFit","owner","Badge","bg","Blog","deleteBlog","upvoteBlog","downvoteBlog","appId","Col","Card","upvote","downvote","Loader","role","Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","NotificationError","DefaultProps","defaultProps","Blogs","fetchBalance","blogs","setBlogs","loading","setLoading","getBlogs","toast","getBlogsAction","then","datas","catch","error","console","log","finally","_","useEffect","data","createBlogAction","editAction","upvoteAction","downvoteAction","property","deleteAction","Row","xs","sm","lg","map","index","App","setAddress","setName","balance","setBalance","accountAddress","indexerClient","lookupAccountByID","do","response","_balance","account","connectWallet","myAlgoConnect","accounts","_account","Container","fluid","Nav","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","this","compileProgram","programSource","encoder","TextEncoder","programBytes","encode","algodClient","compile","compileResponse","Uint8Array","result","senderAddress","getTransactionParams","params","approvalProgram","compiledApprovalProgram","clearProgram","compiledClearProgram","note","blogDappNote","appArgs","txn","algosdk","makeApplicationCreateTxnFromObject","suggestedParams","onComplete","OnApplicationComplete","NoOpOC","numLocalInts","numLocalByteSlices","numLocalBytes","numGlobalInts","numGlobalByteSlices","numGlobalBytes","txId","txID","signTransaction","toByte","signedTxn","sendRawTransaction","blob","waitForConfirmation","confirmedTxn","pendingTransactionInformation","transactionResponse","editArg","appCallTxn","makeApplicationCallTxnFromObject","appIndex","txnArray","groupID","computeGroupID","i","group","tx","upvoteArg","downvoteArg","makeApplicationDeleteTxnFromObject","apid","encodedNote","searchForTransactions","notePrefix","txType","minRound","transactionInfo","transactions","transaction","getApplication","push","lookupApplications","includeAll","application","deleted","globalState","creator","getField","fieldName","find","state","key","undefined","field","bytes","uint","config","Algodv2","Indexer","MyAlgoConnect"],"mappings":"sHAAe,ikC,mCCAA,sC,iQCAf,iLAGaA,EAAqB,SAACC,GAC/B,OAAOC,EAAOC,KAAKF,EAAc,UAAUG,SAAS,QACvD,EAEYC,EAAqB,SAACC,GAC/B,OAAOJ,EAAOC,KAAKG,EAAY,QAAQF,SAAS,SACnD,EAGYG,EAAkB,SAACC,GAC5B,GAAKA,EACL,OAAOA,EAAQC,MAAM,EAAG,GAAK,MAAQD,EAAQC,MAAMD,EAAQE,OAAS,EAAGF,EAAQE,OAClF,EAGYC,EAAqB,SAACC,GAC/B,GAAKA,EAEL,OADgB,IAAIC,IAAUD,GACbE,WAAWC,KAAmBC,QAAQ,EAC1D,C,gJCacC,EA/BD,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,QAC5B,OACI,sBAAKC,UAAU,4EAAf,UACI,sBAAKA,UAAU,0BAAf,UACI,qBACIA,UAAU,gCACVC,MAAO,CAACC,SAAU,SAFtB,SAII,qBAAKC,IAAKL,EAAUM,IAAI,OAE5B,6BAAKP,IACL,wEACA,cAACQ,EAAA,EAAD,CACIC,QAAS,kBAAMP,GAAN,EACTQ,QAAQ,gBACRP,UAAU,yBAHd,+BAQJ,mBAAGA,UAAU,yBAAb,mCAGX,E,iGCbcQ,EAXG,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMtB,EAAR,EAAQA,QAAYuB,EAApB,wBACd,+CAASA,GAAT,IAAeT,MAAO,CAACU,MAAM,GAAD,OAAKF,EAAL,MAAeG,OAAO,GAAD,OAAKH,EAAL,OAAjD,SACI,cAAC,IAAD,CAAUI,SAAUJ,EAAMK,KAAMC,SAAS5B,EAAQC,MAAM,EAAG,IAAK,QAFrD,ECuDH4B,EApDA,SAAC,GAAiD,IAAhD7B,EAA+C,EAA/CA,QAASU,EAAsC,EAAtCA,KAAMoB,EAAgC,EAAhCA,OAAQC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,WAC5C,OAAKhC,EAID,mCACI,eAACiC,EAAA,EAAD,WACI,eAACA,EAAA,EAASC,OAAV,CAAiBd,QAAQ,QAAQe,MAAM,MAAMC,GAAG,iBAC/BvB,UAAU,qDAD3B,UAEKiB,EACG,qCACK3B,YAAmB2B,GACpB,uBAAMjB,UAAU,OAAhB,cAAyBkB,QAG7B,cAACM,EAAA,EAAD,CAASC,UAAU,SAAShB,KAAK,KAAKT,UAAU,eAEpD,cAAC,EAAD,CAAWb,QAASA,EAASsB,KAAM,GAAIT,UAAU,iBAGrD,eAACoB,EAAA,EAASM,KAAV,CAAe1B,UAAU,qBAAzB,UACI,cAACoB,EAAA,EAASO,KAAV,CAAeC,KAAI,kDAA6CzC,GACjD0C,OAAO,SADtB,SAEI,eAACC,EAAA,EAAD,CAAOC,UAAU,aAAaC,IAAK,EAAnC,UACI,mBAAGhC,UAAU,6BACb,sBAAKA,UAAU,qBAAf,UACKH,GAAS,sBAAMG,UAAU,iBAAhB,SAAkCH,IAC5C,sBAAMG,UAAU,iBAAhB,SAAkCd,YAAgBC,aAI9D,cAACiC,EAAA,EAASa,QAAV,IACA,eAACb,EAAA,EAASO,KAAV,CAAeO,GAAG,SAASlC,UAAU,4BAA4BM,QAAS,WACtEa,GACH,EAFD,UAGI,mBAAGnB,UAAU,oCAHjB,wBA9BL,IAwCd,E,qDCqDcmC,EAjGC,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACjB,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAEMC,EAAeC,uBAAY,WAC/B,OAAOP,GAASE,GAASE,CAC1B,GAAE,CAACJ,EAAOE,EAAOE,IAElB,EAAwBL,oBAAS,GAAjC,mBAAOS,EAAP,KAAaC,EAAb,KAEMC,EAAc,kBAAMD,GAAQ,EAAd,EAGpB,OACE,qCACE,cAAC1C,EAAA,EAAD,CACEC,QALa,kBAAMyC,GAAQ,EAAd,EAMbxC,QAAQ,OACRP,UAAU,oBACVC,MAAO,CAAEU,MAAO,QAJlB,SAME,mBAAGX,UAAU,iBAEf,eAACiD,EAAA,EAAD,CAAOH,KAAMA,EAAMI,OAAQF,EAAaG,UAAQ,EAAhD,UACE,cAACF,EAAA,EAAMG,OAAP,CAAcC,aAAW,EAAzB,SACE,cAACJ,EAAA,EAAMK,MAAP,yBAEF,cAACC,EAAA,EAAD,UACE,eAACN,EAAA,EAAMO,KAAP,WACE,cAACC,EAAA,EAAD,CAAeC,UAAU,YAAYC,MAAM,QAAQ3D,UAAU,OAA7D,SACE,cAACuD,EAAA,EAAKK,QAAN,CACEC,KAAK,OACLC,SAAU,SAACC,GACTxB,EAASwB,EAAElC,OAAOmC,MACnB,EACDC,YAAY,kBAGhB,cAACR,EAAA,EAAD,CACEC,UAAU,WACVC,MAAM,YACN3D,UAAU,OAHZ,SAKE,cAACuD,EAAA,EAAKK,QAAN,CACEC,KAAK,OACLI,YAAY,YACZD,MAAOxB,EACPsB,SAAU,SAACC,GACTtB,EAASsB,EAAElC,OAAOmC,MACnB,MAGL,cAACP,EAAA,EAAD,CACEC,UAAU,eACVC,MAAM,UACN3D,UAAU,OAHZ,SAKE,cAACuD,EAAA,EAAKK,QAAN,CACE1B,GAAG,WACH+B,YAAY,UACZhE,MAAO,CAAEW,OAAQ,QACjBkD,SAAU,SAACC,GACTpB,EAAWoB,EAAElC,OAAOmC,MACrB,WAKT,eAACf,EAAA,EAAMiB,OAAP,WACE,cAAC7D,EAAA,EAAD,CAAQE,QAAQ,oBAAoBD,QAAS0C,EAA7C,mBAGA,cAAC3C,EAAA,EAAD,CACEE,QAAQ,OACR4D,UAAWvB,IACXtC,QAAS,WACP8B,EAAW,CACTE,QACAE,QACAE,YAEFM,GACD,EAVH,0BAkBT,E,2BCOcoB,EAlGE,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,KAC5B,EAA0BjC,mBAASiC,EAAKhC,OAAxC,mBAAOA,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAASiC,EAAK9B,OAAxC,mBAAOA,EAAP,KAAcC,EAAd,KACA,EAA8BJ,mBAASiC,EAAK5B,SAA5C,mBAAOA,EAAP,KAAgBC,EAAhB,KAEMC,EAAeC,uBAAY,WAC/B,OAAOP,GAASE,GAASE,CAC1B,GAAE,CAACJ,EAAOE,EAAOE,IAElB,EAAwBL,oBAAS,GAAjC,mBAAOS,EAAP,KAAaC,EAAb,KAEMC,EAAc,kBAAMD,GAAQ,EAAd,EAGpB,OACE,qCACE,cAAC1C,EAAA,EAAD,CACEE,QAAQ,eACRD,QANa,kBAAMyC,GAAQ,EAAd,EAOb/C,UAAU,gBAHZ,kBAQA,eAACiD,EAAA,EAAD,CAAOH,KAAMA,EAAMI,OAAQF,EAAaG,UAAQ,EAAhD,UACE,cAACF,EAAA,EAAMG,OAAP,CAAcC,aAAW,EAAzB,SACE,cAACJ,EAAA,EAAMK,MAAP,0BAEF,cAACC,EAAA,EAAD,UACE,eAACN,EAAA,EAAMO,KAAP,WACE,cAACC,EAAA,EAAD,CAAeC,UAAU,YAAYC,MAAM,QAAQ3D,UAAU,OAA7D,SACE,cAACuD,EAAA,EAAKK,QAAN,CACEC,KAAK,OACLC,SAAU,SAACC,GACTxB,EAASwB,EAAElC,OAAOmC,MACnB,EACDC,YAAY,kBAGhB,cAACR,EAAA,EAAD,CACEC,UAAU,WACVC,MAAM,YACN3D,UAAU,OAHZ,SAKE,cAACuD,EAAA,EAAKK,QAAN,CACEC,KAAK,OACLI,YAAY,YACZD,MAAOxB,EACPsB,SAAU,SAACC,GACTtB,EAASsB,EAAElC,OAAOmC,MACnB,MAGL,cAACP,EAAA,EAAD,CACEC,UAAU,eACVC,MAAM,UACN3D,UAAU,OAHZ,SAKE,cAACuD,EAAA,EAAKK,QAAN,CACE1B,GAAG,WACH+B,YAAY,UACZhE,MAAO,CAAEW,OAAQ,QACjBkD,SAAU,SAACC,GACTpB,EAAWoB,EAAElC,OAAOmC,MACrB,WAKT,eAACf,EAAA,EAAMiB,OAAP,WACE,cAAC7D,EAAA,EAAD,CAAQE,QAAQ,oBAAoBD,QAAS0C,EAA7C,mBAGA,cAAC3C,EAAA,EAAD,CACEE,QAAQ,OACR4D,UAAWvB,IACXtC,QAAS,WACP+D,EAAS,CACP/B,QACAE,QACAE,YAEFM,GACD,EAVH,0BAkBT,ECjCcuB,EAxDE,SAAC,GAAc,IAAZD,EAAW,EAAXA,KAClB,EAAwBjC,oBAAS,GAAjC,mBAAOS,EAAP,KAAaC,EAAb,KAEMC,EAAc,kBAAMD,GAAQ,EAAd,EAGpB,OACE,qCACE,cAAC1C,EAAA,EAAD,CACEE,QAAQ,eACRD,QANa,kBAAMyC,GAAQ,EAAd,EAOb/C,UAAU,gBAHZ,uBAQA,eAACiD,EAAA,EAAD,CAAOH,KAAMA,EAAMI,OAAQF,EAAaG,UAAQ,EAAhD,UACE,cAACF,EAAA,EAAMG,OAAP,CAAcC,aAAW,EAAzB,SACE,cAACJ,EAAA,EAAMK,MAAP,UAAcgB,EAAKhC,UAGrB,eAACW,EAAA,EAAMO,KAAP,WACE,qBAAKxD,UAAU,kBAAf,SACE,qBACEG,IAAKmE,EAAK9B,MACVpC,IAAKkE,EAAKhC,MACVrC,MAAO,CAAEuE,UAAW,aAGxB,4BAAIF,EAAK5B,UACT,wCACA,eAACZ,EAAA,EAAD,CAAOC,UAAU,aAAaC,IAAK,EAAnC,UACE,sBAAMhC,UAAU,gCAAhB,SACGd,YAAgBoF,EAAKG,SAExB,cAAC,EAAD,CAAWhE,KAAM,GAAItB,QAASmF,EAAKG,QACnC,cAACC,EAAA,EAAD,CAAOC,GAAG,YAAY3E,UAAU,UAAhC,6BAMJ,cAACiD,EAAA,EAAMiB,OAAP,UACE,cAAC7D,EAAA,EAAD,CAAQE,QAAQ,oBAAoBD,QAAS0C,EAA7C,0BAOT,EC6Bc4B,EA7EF,SAAC,GAOP,IANLzF,EAMI,EANJA,QACAmF,EAKI,EALJA,KACAD,EAII,EAJJA,SACAQ,EAGI,EAHJA,WACAC,EAEI,EAFJA,WACAC,EACI,EADJA,aAEQzC,EAA+BgC,EAA/BhC,MAAOE,EAAwB8B,EAAxB9B,MAAOwC,EAAiBV,EAAjBU,MAAOP,EAAUH,EAAVG,MAE7B,OACE,cAACQ,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAMlF,UAAU,QAAhB,UACE,cAACkF,EAAA,EAAK9B,OAAN,UACE,eAACtB,EAAA,EAAD,CAAOC,UAAU,aAAaC,IAAK,EAAnC,UACE,sBAAMhC,UAAU,gCAAhB,SACGd,YAAgBuF,KAEnB,cAAC,EAAD,CAAWhE,KAAM,GAAItB,QAASsF,IAC9B,cAACC,EAAA,EAAD,CAAOC,GAAG,YAAY3E,UAAU,UAAhC,4BAKJ,qBAAKA,UAAU,kBAAf,SACE,qBAAKG,IAAKqC,EAAOpC,IAAKkC,EAAOrC,MAAO,CAAEuE,UAAW,aAEnD,eAACU,EAAA,EAAK1B,KAAN,CAAWxD,UAAU,iCAArB,UACE,cAACkF,EAAA,EAAK5B,MAAN,UAAahB,IAEb,eAACiB,EAAA,EAAD,CAAMvD,UAAU,8CAAhB,UACGsE,EAAKG,QAAUtF,EACd,cAAC,EAAD,CAAUmF,KAAMA,EAAMD,SAAUA,IAEhC,cAAC,EAAD,CAAUC,KAAMA,IAElB,eAACjE,EAAA,EAAD,CACEE,QAAQ,eACRD,QAAS,kBAAMwE,EAAWR,EAAjB,EACTtE,UAAU,MAHZ,UAKGsE,EAAKa,OACN,mBAAGnF,UAAU,iCAEf,eAACK,EAAA,EAAD,CACEE,QAAQ,eACRD,QAAS,kBAAMyE,EAAaT,EAAnB,EACTtE,UAAU,MAHZ,UAKGsE,EAAKc,SACN,mBAAGpF,UAAU,mCAEdsE,EAAKG,QAAUtF,GACd,cAACkB,EAAA,EAAD,CACEE,QAAQ,iBACRD,QAAS,kBAAMuE,EAAWP,EAAjB,EACTtE,UAAU,MAHZ,SAKE,mBAAGA,UAAU,4BA/CfgF,EAuDb,EC/DcK,EARA,kBACX,qBAAKrF,UAAU,gCAAf,SACI,cAACwB,EAAA,EAAD,CAASC,UAAU,SAAS6D,KAAK,SAAStF,UAAU,aAApD,SACI,sBAAMA,UAAU,kBAAhB,2BAHG,ECCTuF,EAAe,kBACjB,cAAC,IAAD,CACIC,SAAS,gBACTC,UAAW,IACXC,iBAAe,EACfC,aAAW,EACXC,cAAY,EACZC,KAAK,EACLC,kBAAgB,EAChBC,WAAW,EACXC,cAAY,GAVC,EAcfC,EAAsB,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAF,OACxB,gCACI,mBAAGlG,UAAU,8CACb,sBAAMA,UAAU,sBAAhB,SAAuCkG,MAHnB,EAOtBC,EAAoB,SAAC,GAAD,IAAED,EAAF,EAAEA,KAAF,OACtB,gCACI,mBAAGlG,UAAU,yCACb,sBAAMA,UAAU,sBAAhB,SAAuCkG,MAHrB,EAWpBE,EAAe,CACjBF,KAAM,IAIVD,EAAoBI,aAAeD,EAGnCD,EAAkBE,aAAeD,E,qBC0GlBE,EArID,SAAC,GAA+B,IAA7BnH,EAA4B,EAA5BA,QAASoH,EAAmB,EAAnBA,aACxB,EAA0BlE,mBAAS,IAAnC,mBAAOmE,EAAP,KAAcC,EAAd,KACA,EAA8BpE,oBAAS,GAAvC,mBAAOqE,EAAP,KAAgBC,EAAhB,KAEMC,EAAQ,iDAAG,wFACfD,GAAW,GACXE,YAAM,cAAC,EAAD,CAAqBX,KAAK,oBAChCY,cACGC,MAAK,SAACC,GACDA,GACFP,EAASO,EAEZ,IACAC,OAAM,SAACC,GACNC,QAAQC,IAAIF,EACb,IACAG,SAAQ,SAACC,GACRX,GAAW,EACZ,IAdY,2CAAH,qDAiBdY,qBAAU,WACRX,GACD,GAAE,IAEH,IAAMxE,EAAU,iDAAG,WAAOoF,GAAP,2EACjBb,GAAW,GACXc,YAAiBtI,EAASqI,GACvBT,MAAK,WACJF,YAAM,cAAC,EAAD,CAAqBX,KAAK,8BAChCU,IACAL,EAAapH,EACd,IACA8H,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZL,YAAM,cAAC,EAAD,CAAmBX,KAAK,8BAC9BS,GAAW,EACZ,IAZc,2CAAH,sDAeVtC,EAAQ,iDAAG,WAAOC,GAAP,2EACfqC,GAAW,GACXe,YAAWvI,EAASmF,GACjByC,MAAK,WACJF,YAAM,cAAC,EAAD,CAAqBX,KAAK,4BAChCU,IACAL,EAAapH,EACd,IACA8H,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZL,YAAM,cAAC,EAAD,CAAmBX,KAAK,0BAC9BS,GAAW,EACZ,IAZY,2CAAH,sDAeR7B,EAAU,iDAAG,WAAOR,GAAP,2EACjBqC,GAAW,GACXgB,YAAaxI,EAASmF,GACnByC,MAAK,WACJF,YAAM,cAAC,EAAD,CAAqBX,KAAK,+BAChCU,IACAL,EAAapH,EACd,IACA8H,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZL,YAAM,cAAC,EAAD,CAAmBX,KAAK,4BAC9BS,GAAW,EACZ,IAZc,2CAAH,sDAeV5B,EAAY,iDAAG,WAAOT,GAAP,2EACnBqC,GAAW,GACXiB,YAAezI,EAASmF,GACrByC,MAAK,WACJF,YAAM,cAAC,EAAD,CAAqBX,KAAK,iCAChCU,IACAL,EAAapH,EACd,IACA8H,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZL,YAAM,cAAC,EAAD,CAAmBX,KAAK,8BAC9BS,GAAW,EACZ,IAZgB,2CAAH,sDAeZ9B,EAAU,iDAAG,WAAOgD,GAAP,2EACjBlB,GAAW,GACXmB,YAAa3I,EAAS0I,EAAS7C,OAC5B+B,MAAK,WACJF,YAAM,cAAC,EAAD,CAAqBX,KAAK,+BAChCU,IACAL,EAAapH,EACd,IACA8H,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZL,YAAM,cAAC,EAAD,CAAmBX,KAAK,4BAC9BS,GAAW,EACZ,IAZc,2CAAH,sDAehB,OAAID,EACK,cAAC,EAAD,IAGP,qCACE,sBAAK1G,UAAU,yDAAf,UACE,oBAAIA,UAAU,oBAAd,mBACA,cAAC,EAAD,CAASoC,WAAYA,OAEvB,cAAC2F,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGlI,UAAU,0BAApC,SACE,mCACGwG,EAAM2B,KAAI,SAACX,EAAMY,GAAP,OACT,cAAC,EAAD,CACEjJ,QAASA,EACTmF,KAAMkD,EACNnD,SAAUA,EACVQ,WAAYA,EACZC,WAAYA,EACZC,aAAcA,GACTqD,EARE,UAepB,E,OC9DcC,EAxEH,WACV,MAA8BhG,mBAAS,MAAvC,mBAAOlD,EAAP,KAAgBmJ,EAAhB,KACA,EAAwBjG,mBAAS,MAAjC,mBAAOxC,EAAP,KAAa0I,EAAb,KACA,EAA8BlG,mBAAS,GAAvC,mBAAOmG,EAAP,KAAgBC,EAAhB,KAEMlC,EAAY,iDAAG,WAAOmC,GAAP,2EACnBC,IACGC,kBAAkBF,GAClBG,KACA9B,MAAK,SAAC+B,GACL,IAAMC,EAAWD,EAASE,QAAQ/H,OAClCwH,EAAWM,EACZ,IACA9B,OAAM,SAACC,GACNC,QAAQC,IAAIF,EACb,IAVgB,2CAAH,sDAaZ+B,EAAa,iDAAG,wFACpBC,IACGnJ,UACAgH,MAAK,SAACoC,GACL,IAAMC,EAAWD,EAAS,GAC1Bb,EAAWc,EAASjK,SACpBoJ,EAAQa,EAASvJ,MACjB0G,EAAa6C,EAASjK,QACvB,IACA8H,OAAM,SAACC,GACNC,QAAQC,IAAI,sCACZD,QAAQD,MAAMA,EACf,IAZiB,2CAAH,qDAqBnB,OACE,qCACE,cAAC,EAAD,IACC/H,EACC,eAACkK,EAAA,EAAD,CAAWC,MAAM,KAAjB,UACE,cAACC,EAAA,EAAD,CAAKvJ,UAAU,gCAAf,SACE,cAACuJ,EAAA,EAAI5H,KAAL,UACE,cAAC,EAAD,CACExC,QAASA,EACTU,KAAMA,EACNoB,OAAQuH,EACRrH,WAjBK,WACjBmH,EAAW,MACXC,EAAQ,MACRE,EAAW,KACZ,EAcavH,OAAQ,aAId,+BACE,cAAC,EAAD,CAAO/B,QAASA,EAASoH,aAAcA,SAI3C,cAAC,EAAD,CACE1G,KAAM,cACNC,SACE,2GAEFC,QAASkJ,MAKlB,ECjEcO,EAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB3C,MAAK,YAEnB,IADL4C,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,EACT,GAEJ,E,qBCJDO,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5BZ,G,yVCDM5E,E,aACJ,WAAYtC,EAAOE,EAAOE,EAASyC,EAAQC,EAAUJ,EAAOP,GAAQ,oBAClE4F,KAAK/H,MAAQA,EACb+H,KAAK7H,MAAQA,EACb6H,KAAK3H,QAAUA,EACf2H,KAAKlF,OAASA,EACdkF,KAAKjF,SAAWA,EAChBiF,KAAKrF,MAAQA,EACbqF,KAAK5F,MAAQA,CACd,IAIG6F,EAAc,iDAAG,WAAOC,GAAP,4FACjBC,EAAU,IAAIC,YACdC,EAAeF,EAAQG,OAAOJ,GAFb,SAGOK,IAAYC,QAAQH,GAAc7B,KAHzC,cAGjBiC,EAHiB,yBAId,IAAIC,WAAWlM,EAAOC,KAAKgM,EAAgBE,OAAQ,YAJrC,2CAAH,sDAQPvD,EAAgB,iDAAG,WAAOwD,EAAe3G,GAAtB,kHAC9B6C,QAAQC,IAAI,kBADkB,SAGXwD,IAAYM,uBAAuBrC,KAHxB,cAG1BsC,EAH0B,gBAMQb,EAAec,KANvB,cAMxBC,EANwB,gBAOKf,EAAegB,KAPpB,cAOxBC,EAPwB,OAU1BC,GAAO,IAAIf,aAAcE,OAAOc,KAChCnJ,GAAQ,IAAImI,aAAcE,OAAOrG,EAAKhC,OACtCE,GAAQ,IAAIiI,aAAcE,OAAOrG,EAAK9B,OACtCE,GAAU,IAAI+H,aAAcE,OAAOrG,EAAK5B,SAExCgJ,EAAU,CAACpJ,EAAOE,EAAOE,GAGzBiJ,EAAMC,IAAQC,mCAAmC,CACnD/M,KAAMmM,EACNa,gBAAiBX,EACjBY,WAAYH,IAAQI,sBAAsBC,OAC1Cb,gBAAiBC,EACjBC,aAAcC,EACdW,aAAcA,IACdC,mBAAoBC,IACpBC,cAAeA,IACfC,oBAAqBC,IACrBf,KAAMA,EACNE,QAASA,IAIPc,EAAOb,EAAIc,OAAO1N,WAjCQ,UAoCRmK,IAAcwD,gBAAgBf,EAAIgB,UApC1B,eAoC1BC,EApC0B,OAqC9BzF,QAAQC,IAAI,mCAAoCoF,GArClB,UAsCxB5B,IAAYiC,mBAAmBD,EAAUE,MAAMjE,KAtCvB,yBAyCL+C,IAAQmB,oBAAoBnC,IAAa4B,EAAM,GAzC1C,eAyC1BQ,EAzC0B,OA4C9B7F,QAAQC,IACN,eACEoF,EACA,uBACAQ,EAAa,oBAhDa,UAoDEpC,IAC7BqC,8BAA8BT,GAC9B3D,KAtD2B,eAoD1BqE,EApD0B,OAuD1BlI,EAAQkI,EAAoB,qBAChC/F,QAAQC,IAAI,uBAAwBpC,GAxDN,kBAyDvBA,GAzDuB,4CAAH,wDA6DhB0C,EAAU,iDAAG,WAAOuD,EAAe3G,GAAtB,gHACxB6C,QAAQC,IAAI,gBADY,SAGLwD,IAAYM,uBAAuBrC,KAH9B,OAyBxB,IAtBIsC,EAHoB,OAMpBgC,GAAU,IAAI1C,aAAcE,OAAO,QACnCrI,GAAQ,IAAImI,aAAcE,OAAOrG,EAAKhC,OACtCE,GAAQ,IAAIiI,aAAcE,OAAOrG,EAAK9B,OACtCE,GAAU,IAAI+H,aAAcE,OAAOrG,EAAK5B,SACxCgJ,EAAU,CAACyB,EAAS7K,EAAOE,EAAOE,GAGlC0K,EAAaxB,IAAQyB,iCAAiC,CACxDvO,KAAMmM,EACNqC,SAAUhJ,EAAKU,MACf+G,WAAYH,IAAQI,sBAAsBC,OAC1CH,gBAAiBX,EACjBO,QAASA,IAGP6B,EAAW,CAACH,GAGZI,EAAU5B,IAAQ6B,eAAeF,GAC5BG,EAAI,EAAGA,EAAI,EAAGA,IAAKH,EAASG,GAAGC,MAAQH,EAzBxB,iBA4BFtE,IAAcwD,gBAClCa,EAASpF,KAAI,SAACwD,GAAD,OAASA,EAAIgB,QAAb,KA7BS,eA4BpBC,EA5BoB,OA+BxBzF,QAAQC,IAAI,4BA/BY,UAgCTwD,IACZiC,mBAAmBD,EAAUzE,KAAI,SAACwD,GAAD,OAASA,EAAImB,IAAb,KACjCjE,KAlCqB,eAgCpB+E,EAhCoB,iBAqCChC,IAAQmB,oBAAoBnC,IAAagD,EAAGpB,KAAM,GArCnD,QAqCpBQ,EArCoB,OAwCxB7F,QAAQC,IACN,qBACEwG,EAAGpB,KACH,uBACAQ,EAAa,oBA5CO,4CAAH,wDAiDVrF,EAAY,iDAAG,WAAOsD,EAAe3G,GAAtB,0GAC1B6C,QAAQC,IAAI,kBADc,SAGPwD,IAAYM,uBAAuBrC,KAH5B,OAuB1B,IApBIsC,EAHsB,OAMtB0C,GAAY,IAAIpD,aAAcE,OAAO,UAErCe,EAAU,CAACmC,GAGXT,EAAaxB,IAAQyB,iCAAiC,CACxDvO,KAAMmM,EACNqC,SAAUhJ,EAAKU,MACf+G,WAAYH,IAAQI,sBAAsBC,OAC1CH,gBAAiBX,EACjBO,QAASA,IAGP6B,EAAW,CAACH,GAGZI,EAAU5B,IAAQ6B,eAAeF,GAC5BG,EAAI,EAAGA,EAAI,EAAGA,IAAKH,EAASG,GAAGC,MAAQH,EAvBtB,iBA0BJtE,IAAcwD,gBAClCa,EAASpF,KAAI,SAACwD,GAAD,OAASA,EAAIgB,QAAb,KA3BW,eA0BtBC,EA1BsB,OA6B1BzF,QAAQC,IAAI,4BA7Bc,UA8BXwD,IACZiC,mBAAmBD,EAAUzE,KAAI,SAACwD,GAAD,OAASA,EAAImB,IAAb,KACjCjE,KAhCuB,eA8BtB+E,EA9BsB,iBAmCDhC,IAAQmB,oBAAoBnC,IAAagD,EAAGpB,KAAM,GAnCjD,QAmCtBQ,EAnCsB,OAsC1B7F,QAAQC,IACN,qBACEwG,EAAGpB,KACH,uBACAQ,EAAa,oBA1CS,4CAAH,wDA+CZpF,EAAc,iDAAG,WAAOqD,EAAe3G,GAAtB,0GAC5B6C,QAAQC,IAAI,oBADgB,SAGTwD,IAAYM,uBAAuBrC,KAH1B,OAuB5B,IApBIsC,EAHwB,OAMxB2C,GAAc,IAAIrD,aAAcE,OAAO,YAEvCe,EAAU,CAACoC,GAGXV,EAAaxB,IAAQyB,iCAAiC,CACxDvO,KAAMmM,EACNqC,SAAUhJ,EAAKU,MACf+G,WAAYH,IAAQI,sBAAsBC,OAC1CH,gBAAiBX,EACjBO,QAASA,IAGP6B,EAAW,CAACH,GAGZI,EAAU5B,IAAQ6B,eAAeF,GAC5BG,EAAI,EAAGA,EAAI,EAAGA,IAAKH,EAASG,GAAGC,MAAQH,EAvBpB,iBA0BNtE,IAAcwD,gBAClCa,EAASpF,KAAI,SAACwD,GAAD,OAASA,EAAIgB,QAAb,KA3Ba,eA0BxBC,EA1BwB,OA6B5BzF,QAAQC,IAAI,4BA7BgB,UA8BbwD,IACZiC,mBAAmBD,EAAUzE,KAAI,SAACwD,GAAD,OAASA,EAAImB,IAAb,KACjCjE,KAhCyB,eA8BxB+E,EA9BwB,iBAmCHhC,IAAQmB,oBAAoBnC,IAAagD,EAAGpB,KAAM,GAnC/C,QAmCxBQ,EAnCwB,OAsC5B7F,QAAQC,IACN,qBACEwG,EAAGpB,KACH,uBACAQ,EAAa,oBA1CW,4CAAH,wDA+CdlF,EAAY,iDAAG,WAAOmD,EAAe7C,GAAtB,oGAC1BjB,QAAQC,IAAI,2BADc,SAGPwD,IAAYM,uBAAuBrC,KAH5B,cAGtBsC,EAHsB,OAMtBQ,EAAMC,IAAQmC,mCAAmC,CACnDjP,KAAMmM,EACNa,gBAAiBX,EACjBmC,SAAUlF,IAIRoE,EAAOb,EAAIc,OAAO1N,WAbI,SAgBJmK,IAAcwD,gBAAgBf,EAAIgB,UAhB9B,cAgBtBC,EAhBsB,OAiB1BzF,QAAQC,IAAI,mCAAoCoF,GAjBtB,UAkBpB5B,IAAYiC,mBAAmBD,EAAUE,MAAMjE,KAlB3B,yBAqBC+C,IAAQmB,oBAAoBnC,IAAa4B,EAAM,GArBhD,eAqBpBQ,EArBoB,OAwB1B7F,QAAQC,IACN,eACEoF,EACA,uBACAQ,EAAa,oBA5BS,UAgCMpC,IAC7BqC,8BAA8BT,GAC9B3D,KAlCuB,QAgCtBqE,EAhCsB,OAmCtBlI,EAAQkI,EAAmB,IAAnB,IAAkCc,KAC9C7G,QAAQC,IAAI,mBAAoBpC,GApCN,4CAAH,wDAwCZ8B,EAAc,iDAAG,qHAC5BK,QAAQC,IAAI,oBACRoE,GAAO,IAAIf,aAAcE,OAAOc,KAChCwC,EAAcpP,EAAOC,KAAK0M,GAAMzM,SAAS,UAHjB,SAMA4J,IACzBuF,wBACAC,WAAWF,GACXG,OAAO,QACPC,SAASA,KACTxF,KAXyB,OAMxByF,EANwB,OAYxB9H,EAAQ,GAZgB,cAaF8H,EAAgBC,cAbd,6DAajBC,EAbiB,UActBxJ,EAAQwJ,EAAY,8BAdE,kCAiBPC,EAAezJ,GAjBR,SAiBpBV,EAjBoB,SAmBtBkC,EAAMkI,KAAKpK,GAnBW,uJAuB5B6C,QAAQC,IAAI,iBAvBgB,kBAwBrBZ,GAxBqB,gEAAH,qDA2BrBiI,EAAc,iDAAG,WAAOzJ,GAAP,gIAGE2D,IAClBgG,mBAAmB3J,GACnB4J,YAAW,GACX/F,KANgB,YAGfC,EAHe,QAON+F,YAAYC,QAPN,yCAQV,MARU,cAUfC,EAAcjG,EAAS+F,YAAY1D,OAAO,gBAG1C1G,EAAQqE,EAAS+F,YAAY1D,OAAO6D,QACpC1M,EAAQ,GACRE,EAAQ,GACRE,EAAU,GACVyC,EAAS,EACTC,EAAW,EAET6J,EAAW,SAACC,EAAWH,GAC3B,OAAOA,EAAYI,MAAK,SAACC,GACvB,OAAOA,EAAMC,MAAQrQ,YAAmBkQ,EACzC,GACF,OAEsCI,IAAnCL,EAAS,QAASF,KAChBQ,EAAQN,EAAS,QAASF,GAAa/K,MAAMwL,MACjDlN,EAAQ3D,YAAmB4Q,SAGUD,IAAnCL,EAAS,QAASF,KAChBQ,EAAQN,EAAS,QAASF,GAAa/K,MAAMwL,MACjDhN,EAAQ7D,YAAmB4Q,SAGYD,IAArCL,EAAS,UAAWF,KAClBQ,EAAQN,EAAS,UAAWF,GAAa/K,MAAMwL,MACnD9M,EAAU/D,YAAmB4Q,SAGSD,IAApCL,EAAS,SAAUF,KACrB5J,EAAS8J,EAAS,SAAUF,GAAa/K,MAAMyL,WAGPH,IAAtCL,EAAS,WAAYF,KACvB3J,EAAW6J,EAAS,WAAYF,GAAa/K,MAAMyL,MA9ClC,kBAiDZ,IAAI7K,EAAKtC,EAAOE,EAAOE,EAASyC,EAAQC,EAAUJ,EAAOP,IAjD7C,2DAmDZ,MAnDY,0DAAH,qD,2DCrTpB,2XAGMiL,EACU,GADVA,EAEW,0CAFXA,EAGS,GAHTA,EAIY,GAJZA,EAKa,iDALbA,EAMW,GAGJ9E,EAAc,IAAIgB,IAAQ+D,QAAQD,EAAmBA,EAAoBA,GAEzE/G,EAAgB,IAAIiD,IAAQgE,QAAQF,EAAqBA,EAAsBA,GAE/ExG,EAAgB,IAAI2G,IAEpBxB,EAAW,SAGX5C,EAAe,gBAGfS,EAAe,EACfE,EAAgB,EAEhBC,EAAgB,EAChBE,EAAiB,EAEjB7M,EAAoB,C","file":"static/js/main.173c74bb.chunk.js","sourcesContent":["export default \"#pragma version 6\\ntxn ApplicationID\\nint 0\\n==\\nbnz main_l10\\ntxn OnCompletion\\nint DeleteApplication\\n==\\nbnz main_l9\\ntxna ApplicationArgs 0\\nbyte \\\"edit\\\"\\n==\\nbnz main_l8\\ntxna ApplicationArgs 0\\nbyte \\\"upvote\\\"\\n==\\nbnz main_l7\\ntxna ApplicationArgs 0\\nbyte \\\"downvote\\\"\\n==\\nbnz main_l6\\nerr\\nmain_l6:\\nbyte \\\"DOWNVOTE\\\"\\nbyte \\\"DOWNVOTE\\\"\\napp_global_get\\nint 1\\n+\\napp_global_put\\nint 1\\nreturn\\nmain_l7:\\nbyte \\\"UPVOTE\\\"\\nbyte \\\"UPVOTE\\\"\\napp_global_get\\nint 1\\n+\\napp_global_put\\nint 1\\nreturn\\nmain_l8:\\nbyte \\\"TITLE\\\"\\ntxna ApplicationArgs 1\\napp_global_put\\nbyte \\\"CONTENT\\\"\\ntxna ApplicationArgs 2\\napp_global_put\\nbyte \\\"IMAGE\\\"\\ntxna ApplicationArgs 3\\napp_global_put\\nint 1\\nreturn\\nmain_l9:\\ntxn Sender\\nglobal CreatorAddress\\n==\\nreturn\\nmain_l10:\\ntxn NumAppArgs\\nint 3\\n==\\nassert\\ntxn Note\\nbyte \\\"blog-dapp:uv2\\\"\\n==\\nassert\\nbyte \\\"TITLE\\\"\\ntxna ApplicationArgs 0\\napp_global_put\\nbyte \\\"IMAGE\\\"\\ntxna ApplicationArgs 1\\napp_global_put\\nbyte \\\"CONTENT\\\"\\ntxna ApplicationArgs 2\\napp_global_put\\nbyte \\\"UPVOTE\\\"\\nint 0\\napp_global_put\\nbyte \\\"DOWNVOTE\\\"\\nint 0\\napp_global_put\\nint 1\\nreturn\";","export default \"#pragma version 6\\nint 1\\nreturn\";","import {ALGORAND_DECIMALS} from \"./constants\";\nimport BigNumber from \"bignumber.js\";\n\nexport const base64ToUTF8String = (base64String) => {\n    return Buffer.from(base64String, 'base64').toString(\"utf-8\")\n}\n\nexport const utf8ToBase64String = (utf8String) => {\n    return Buffer.from(utf8String, 'utf8').toString('base64')\n}\n\n// Truncate is done in the middle to allow for checking of first and last chars simply to ensure correct address\nexport const truncateAddress = (address) => {\n    if (!address) return\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 5, address.length);\n}\n\n// Amounts in microAlgos (e.g. 10500) are shown as algos (e.g. 10.5) in the frontend\nexport const microAlgosToString = (num) => {\n    if (!num) return\n    let bigNumber = new BigNumber(num)\n    return bigNumber.shiftedBy(-ALGORAND_DECIMALS).toFixed(3);\n}\n\n// Convert an amount entered as algos (e.g. 10.5) to microAlgos (e.g. 10500)\nexport const stringToMicroAlgos = (str) => {\n    if (!str) return\n    let bigNumber = new BigNumber(str)\n    return bigNumber.shiftedBy(ALGORAND_DECIMALS).toNumber();\n}","import React from 'react';\nimport {Button} from \"react-bootstrap\";\nimport PropTypes from 'prop-types';\n\nconst Cover = ({name, coverImg, connect}) => {\n    return (\n        <div className=\"d-flex justify-content-center flex-column text-center bg-black min-vh-100\">\n            <div className=\"mt-auto text-light mb-5\">\n                <div\n                    className=\" ratio ratio-1x1 mx-auto mb-2\"\n                    style={{maxWidth: \"320px\"}}\n                >\n                    <img src={coverImg} alt=\"\"/>\n                </div>\n                <h1>{name}</h1>\n                <p>Please connect your wallet to continue.</p>\n                <Button\n                    onClick={() => connect()}\n                    variant=\"outline-light\"\n                    className=\"rounded-pill px-3 mt-3\"\n                >\n                    Connect Wallet\n                </Button>\n            </div>\n            <p className=\"mt-auto text-secondary\">Powered by Algorand</p>\n        </div>\n    );\n};\n\nCover.propTypes = {\n    name: PropTypes.string,\n    coverImg: PropTypes.string,\n    connect: PropTypes.func\n};\n\nexport default Cover;\n","import Jazzicon from \"react-jazzicon\";\nimport PropTypes from \"prop-types\";\n\nconst Identicon = ({size, address, ...rest}) => (\n    <div {...rest} style={{width: `${size}px`, height: `${size}px`}}>\n        <Jazzicon diameter={size} seed={parseInt(address.slice(2, 10), 16)}/>\n    </div>\n);\n\nIdenticon.propTypes = {\n    size: PropTypes.number.isRequired,\n    address: PropTypes.string.isRequired\n};\n\nexport default Identicon;","import React from 'react';\nimport {Dropdown, Spinner, Stack} from 'react-bootstrap';\nimport {microAlgosToString, truncateAddress} from '../utils/conversions';\nimport Identicon from './utils/Identicon'\nimport PropTypes from \"prop-types\";\n\nconst Wallet = ({address, name, amount, symbol, disconnect}) => {\n    if (!address) {\n        return null;\n    }\n    return (\n        <>\n            <Dropdown>\n                <Dropdown.Toggle variant=\"light\" align=\"end\" id=\"dropdown-basic\"\n                                 className=\"d-flex align-items-center border rounded-pill py-1\">\n                    {amount ? (\n                        <>\n                            {microAlgosToString(amount)}\n                            <span className=\"ms-1\"> {symbol}</span>\n                        </>\n                    ) : (\n                        <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\"/>\n                    )}\n                    <Identicon address={address} size={28} className=\"ms-2 me-1\"/>\n                </Dropdown.Toggle>\n\n                <Dropdown.Menu className=\"shadow-lg border-0\">\n                    <Dropdown.Item href={`https://testnet.algoexplorer.io/address/${address}`}\n                                   target=\"_blank\">\n                        <Stack direction=\"horizontal\" gap={2}>\n                            <i className=\"bi bi-person-circle fs-4\"/>\n                            <div className=\"d-flex flex-column\">\n                                {name && (<span className=\"font-monospace\">{name}</span>)}\n                                <span className=\"font-monospace\">{truncateAddress(address)}</span>\n                            </div>\n                        </Stack>\n                    </Dropdown.Item>\n                    <Dropdown.Divider/>\n                    <Dropdown.Item as=\"button\" className=\"d-flex align-items-center\" onClick={() => {\n                        disconnect();\n                    }}>\n                        <i className=\"bi bi-box-arrow-right me-2 fs-4\"/>\n                        Disconnect\n                    </Dropdown.Item>\n                </Dropdown.Menu>\n            </Dropdown>\n        </>\n    )\n};\n\nWallet.propTypes = {\n    address: PropTypes.string,\n    name: PropTypes.string,\n    amount: PropTypes.number,\n    symbol: PropTypes.string,\n    disconnect: PropTypes.func\n};\n\nexport default Wallet;\n","import React, { useCallback, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, FloatingLabel, Form, Modal } from \"react-bootstrap\";\n\nconst AddBlog = ({ createBlog }) => {\n  const [title, setTitle] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n\n  const isFormFilled = useCallback(() => {\n    return title && image && content;\n  }, [title, image, content]);\n\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <>\n      <Button\n        onClick={handleShow}\n        variant=\"dark\"\n        className=\"rounded-pill px-0\"\n        style={{ width: \"38px\" }}\n      >\n        <i className=\"bi bi-plus\"></i>\n      </Button>\n      <Modal show={show} onHide={handleClose} centered>\n        <Modal.Header closeButton>\n          <Modal.Title>New Blog</Modal.Title>\n        </Modal.Header>\n        <Form>\n          <Modal.Body>\n            <FloatingLabel controlId=\"inputName\" label=\"Title\" className=\"mb-3\">\n              <Form.Control\n                type=\"text\"\n                onChange={(e) => {\n                  setTitle(e.target.value);\n                }}\n                placeholder=\"Enter title\"\n              />\n            </FloatingLabel>\n            <FloatingLabel\n              controlId=\"inputUrl\"\n              label=\"Image URL\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Image URL\"\n                value={image}\n                onChange={(e) => {\n                  setImage(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n            <FloatingLabel\n              controlId=\"inputContent\"\n              label=\"Content\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                as=\"textarea\"\n                placeholder=\"content\"\n                style={{ height: \"80px\" }}\n                onChange={(e) => {\n                  setContent(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n          </Modal.Body>\n        </Form>\n        <Modal.Footer>\n          <Button variant=\"outline-secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button\n            variant=\"dark\"\n            disabled={!isFormFilled()}\n            onClick={() => {\n              createBlog({\n                title,\n                image,\n                content,\n              });\n              handleClose();\n            }}\n          >\n            Save\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nAddBlog.propTypes = {\n  createBlog: PropTypes.func.isRequired,\n};\n\nexport default AddBlog;\n","import React, { useCallback, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, FloatingLabel, Form, Modal } from \"react-bootstrap\";\n\nconst EditBlog = ({ editBlog, blog }) => {\n  const [title, setTitle] = useState(blog.title);\n  const [image, setImage] = useState(blog.image);\n  const [content, setContent] = useState(blog.content);\n\n  const isFormFilled = useCallback(() => {\n    return title && image && content;\n  }, [title, image, content]);\n\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <>\n      <Button\n        variant=\"outline-dark\"\n        onClick={handleShow}\n        className=\"btn w-50 py-3\"\n      >\n        Edit\n      </Button>\n\n      <Modal show={show} onHide={handleClose} centered>\n        <Modal.Header closeButton>\n          <Modal.Title>Edit Blog</Modal.Title>\n        </Modal.Header>\n        <Form>\n          <Modal.Body>\n            <FloatingLabel controlId=\"inputName\" label=\"Title\" className=\"mb-3\">\n              <Form.Control\n                type=\"text\"\n                onChange={(e) => {\n                  setTitle(e.target.value);\n                }}\n                placeholder=\"Enter title\"\n              />\n            </FloatingLabel>\n            <FloatingLabel\n              controlId=\"inputUrl\"\n              label=\"Image URL\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Image URL\"\n                value={image}\n                onChange={(e) => {\n                  setImage(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n            <FloatingLabel\n              controlId=\"inputContent\"\n              label=\"Content\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                as=\"textarea\"\n                placeholder=\"content\"\n                style={{ height: \"80px\" }}\n                onChange={(e) => {\n                  setContent(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n          </Modal.Body>\n        </Form>\n        <Modal.Footer>\n          <Button variant=\"outline-secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button\n            variant=\"dark\"\n            disabled={!isFormFilled()}\n            onClick={() => {\n              editBlog({\n                title,\n                image,\n                content,\n              });\n              handleClose();\n            }}\n          >\n            Save\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nEditBlog.propTypes = {\n  editBlog: PropTypes.func.isRequired,\n  blog: PropTypes.instanceOf(Object).isRequired,\n};\n\nexport default EditBlog;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Badge, Button, Modal, Stack } from \"react-bootstrap\";\nimport Identicon from \"../utils/Identicon\";\nimport { truncateAddress } from \"../../utils/conversions\";\n\nconst ViewBlog = ({ blog }) => {\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <>\n      <Button\n        variant=\"outline-dark\"\n        onClick={handleShow}\n        className=\"btn w-50 py-3\"\n      >\n        Read More\n      </Button>\n\n      <Modal show={show} onHide={handleClose} centered>\n        <Modal.Header closeButton>\n          <Modal.Title>{blog.title}</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <div className=\"ratio ratio-4x3\">\n            <img\n              src={blog.image}\n              alt={blog.title}\n              style={{ objectFit: \"cover\" }}\n            />\n          </div>\n          <p>{blog.content}</p>\n          <h6>Author</h6>\n          <Stack direction=\"horizontal\" gap={2}>\n            <span className=\"font-monospace text-secondary\">\n              {truncateAddress(blog.owner)}\n            </span>\n            <Identicon size={28} address={blog.owner} />\n            <Badge bg=\"secondary\" className=\"ms-auto\">\n              Published\n            </Badge>\n          </Stack>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button variant=\"outline-secondary\" onClick={handleClose}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nViewBlog.propTypes = {\n  blog: PropTypes.instanceOf(Object).isRequired,\n};\n\nexport default ViewBlog;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Badge, Button, Card, Col, Form, Stack } from \"react-bootstrap\";\nimport { truncateAddress } from \"../../utils/conversions\";\nimport Identicon from \"../utils/Identicon\";\nimport EditBlog from \"./EditBlog\";\nimport ViewBlog from \"./ViewPost\";\n\nconst Blog = ({\n  address,\n  blog,\n  editBlog,\n  deleteBlog,\n  upvoteBlog,\n  downvoteBlog,\n}) => {\n  const { title, image, appId, owner } = blog;\n\n  return (\n    <Col key={appId}>\n      <Card className=\"h-100\">\n        <Card.Header>\n          <Stack direction=\"horizontal\" gap={2}>\n            <span className=\"font-monospace text-secondary\">\n              {truncateAddress(owner)}\n            </span>\n            <Identicon size={28} address={owner} />\n            <Badge bg=\"secondary\" className=\"ms-auto\">\n              Published\n            </Badge>\n          </Stack>\n        </Card.Header>\n        <div className=\"ratio ratio-4x3\">\n          <img src={image} alt={title} style={{ objectFit: \"cover\" }} />\n        </div>\n        <Card.Body className=\"d-flex flex-column text-center\">\n          <Card.Title>{title}</Card.Title>\n          {/* <Card.Text className=\"flex-grow-1\">{location}</Card.Text> */}\n          <Form className=\"d-flex align-content-stretch flex-row gap-2\">\n            {blog.owner !== address ? (\n              <EditBlog blog={blog} editBlog={editBlog} />\n            ) : (\n              <ViewBlog blog={blog} />\n            )}\n            <Button\n              variant=\"outline-dark\"\n              onClick={() => upvoteBlog(blog)}\n              className=\"btn\"\n            >\n              {blog.upvote}\n              <i className=\"bi bi-hand-thumbs-up-fill\"></i>\n            </Button>\n            <Button\n              variant=\"outline-dark\"\n              onClick={() => downvoteBlog(blog)}\n              className=\"btn\"\n            >\n              {blog.downvote}\n              <i className=\"bi bi-hand-thumbs-down-fill\"></i>\n            </Button>\n            {blog.owner === address && (\n              <Button\n                variant=\"outline-danger\"\n                onClick={() => deleteBlog(blog)}\n                className=\"btn\"\n              >\n                <i className=\"bi bi-trash\"></i>\n              </Button>\n            )}\n          </Form>\n        </Card.Body>\n      </Card>\n    </Col>\n  );\n};\n\nBlog.propTypes = {\n  address: PropTypes.string.isRequired,\n  blog: PropTypes.instanceOf(Object).isRequired,\n  editBlog: PropTypes.func.isRequired,\n  deleteBlog: PropTypes.func.isRequired,\n  upvoteBlog: PropTypes.func.isRequired,\n  downvoteBlog: PropTypes.func.isRequired,\n};\n\nexport default Blog;\n","import React from \"react\";\nimport {Spinner} from \"react-bootstrap\";\n\nconst Loader = () => (\n    <div className=\"d-flex justify-content-center\">\n        <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\n            <span className=\"visually-hidden\">Loading...</span>\n        </Spinner>\n    </div>\n);\n\nexport default Loader;\n","import React from \"react\";\nimport {ToastContainer} from \"react-toastify\";\nimport PropTypes from \"prop-types\";\n\nconst Notification = () => (\n    <ToastContainer\n        position=\"bottom-center\"\n        autoClose={5000}\n        hideProgressBar\n        newestOnTop\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable={false}\n        pauseOnHover\n    />\n);\n\nconst NotificationSuccess = ({text}) => (\n    <div>\n        <i className=\"bi bi-check-circle-fill text-success mx-2\"/>\n        <span className=\"text-secondary mx-1\">{text}</span>\n    </div>\n);\n\nconst NotificationError = ({text}) => (\n    <div>\n        <i className=\"bi bi-x-circle-fill text-danger mx-2\"/>\n        <span className=\"text-secondary mx-1\">{text}</span>\n    </div>\n);\n\nconst Props = {\n    text: PropTypes.string,\n};\n\nconst DefaultProps = {\n    text: \"\",\n};\n\nNotificationSuccess.propTypes = Props;\nNotificationSuccess.defaultProps = DefaultProps;\n\nNotificationError.propTypes = Props;\nNotificationError.defaultProps = DefaultProps;\n\nexport {Notification, NotificationSuccess, NotificationError};\n","import React, { useEffect, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport AddBlog from \"./AddBlog\";\nimport Blog from \"./Blog\";\nimport Loader from \"../utils/Loader\";\nimport { NotificationError, NotificationSuccess } from \"../utils/Notifications\";\nimport PropTypes from \"prop-types\";\nimport { Row } from \"react-bootstrap\";\nimport {\n  createBlogAction,\n  deleteAction,\n  downvoteAction,\n  editAction,\n  getBlogsAction,\n  upvoteAction,\n} from \"../../utils/contract\";\n\nconst Blogs = ({ address, fetchBalance }) => {\n  const [blogs, setBlogs] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const getBlogs = async () => {\n    setLoading(true);\n    toast(<NotificationSuccess text=\"Fetching Blogs\" />);\n    getBlogsAction()\n      .then((datas) => {\n        if (datas) {\n          setBlogs(datas);\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      })\n      .finally((_) => {\n        setLoading(false);\n      });\n  };\n\n  useEffect(() => {\n    getBlogs();\n  }, []);\n\n  const createBlog = async (data) => {\n    setLoading(true);\n    createBlogAction(address, data)\n      .then(() => {\n        toast(<NotificationSuccess text=\"Blog added successfully.\" />);\n        getBlogs();\n        fetchBalance(address);\n      })\n      .catch((error) => {\n        console.log(error);\n        toast(<NotificationError text=\"Failed to create a blog.\" />);\n        setLoading(false);\n      });\n  };\n\n  const editBlog = async (blog) => {\n    setLoading(true);\n    editAction(address, blog)\n      .then(() => {\n        toast(<NotificationSuccess text=\"Blog edit successfully\" />);\n        getBlogs();\n        fetchBalance(address);\n      })\n      .catch((error) => {\n        console.log(error);\n        toast(<NotificationError text=\"Failed to edit blog.\" />);\n        setLoading(false);\n      });\n  };\n\n  const upvoteBlog = async (blog) => {\n    setLoading(true);\n    upvoteAction(address, blog)\n      .then(() => {\n        toast(<NotificationSuccess text=\"Blog upvoted successfully\" />);\n        getBlogs();\n        fetchBalance(address);\n      })\n      .catch((error) => {\n        console.log(error);\n        toast(<NotificationError text=\"Failed to upvote blog.\" />);\n        setLoading(false);\n      });\n  };\n\n  const downvoteBlog = async (blog) => {\n    setLoading(true);\n    downvoteAction(address, blog)\n      .then(() => {\n        toast(<NotificationSuccess text=\"Blog downvoted successfully\" />);\n        getBlogs();\n        fetchBalance(address);\n      })\n      .catch((error) => {\n        console.log(error);\n        toast(<NotificationError text=\"Failed to downvote blog.\" />);\n        setLoading(false);\n      });\n  };\n\n  const deleteBlog = async (property) => {\n    setLoading(true);\n    deleteAction(address, property.appId)\n      .then(() => {\n        toast(<NotificationSuccess text=\"Blog deleted successfully\" />);\n        getBlogs();\n        fetchBalance(address);\n      })\n      .catch((error) => {\n        console.log(error);\n        toast(<NotificationError text=\"Failed to delete blog.\" />);\n        setLoading(false);\n      });\n  };\n\n  if (loading) {\n    return <Loader />;\n  }\n  return (\n    <>\n      <div className=\"d-flex justify-content-between align-items-center mb-4\">\n        <h1 className=\"fs-4 fw-bold mb-0\">Blogs</h1>\n        <AddBlog createBlog={createBlog} />\n      </div>\n      <Row xs={1} sm={2} lg={3} className=\"g-3 mb-5 g-xl-4 g-xxl-5\">\n        <>\n          {blogs.map((data, index) => (\n            <Blog\n              address={address}\n              blog={data}\n              editBlog={editBlog}\n              deleteBlog={deleteBlog}\n              upvoteBlog={upvoteBlog}\n              downvoteBlog={downvoteBlog}\n              key={index}\n            />\n          ))}\n        </>\n      </Row>\n    </>\n  );\n};\n\nBlogs.propTypes = {\n  address: PropTypes.string.isRequired,\n  fetchBalance: PropTypes.func.isRequired,\n};\n\nexport default Blogs;\n","import React, { useState } from \"react\";\nimport Cover from \"./components/Cover\";\nimport \"./App.css\";\nimport Wallet from \"./components/Wallet\";\nimport { Container, Nav } from \"react-bootstrap\";\nimport Blogs from \"./components/blog/Blogs\";\nimport { indexerClient, myAlgoConnect } from \"./utils/constants\";\nimport { Notification } from \"./components/utils/Notifications\";\n\nconst App = function AppWrapper() {\n  const [address, setAddress] = useState(null);\n  const [name, setName] = useState(null);\n  const [balance, setBalance] = useState(0);\n\n  const fetchBalance = async (accountAddress) => {\n    indexerClient\n      .lookupAccountByID(accountAddress)\n      .do()\n      .then((response) => {\n        const _balance = response.account.amount;\n        setBalance(_balance);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const connectWallet = async () => {\n    myAlgoConnect\n      .connect()\n      .then((accounts) => {\n        const _account = accounts[0];\n        setAddress(_account.address);\n        setName(_account.name);\n        fetchBalance(_account.address);\n      })\n      .catch((error) => {\n        console.log(\"Could not connect to MyAlgo wallet\");\n        console.error(error);\n      });\n  };\n\n  const disconnect = () => {\n    setAddress(null);\n    setName(null);\n    setBalance(null);\n  };\n\n  return (\n    <>\n      <Notification />\n      {address ? (\n        <Container fluid=\"md\">\n          <Nav className=\"justify-content-end pt-3 pb-5\">\n            <Nav.Item>\n              <Wallet\n                address={address}\n                name={name}\n                amount={balance}\n                disconnect={disconnect}\n                symbol={\"ALGO\"}\n              />\n            </Nav.Item>\n          </Nav>\n          <main>\n            <Blogs address={address} fetchBalance={fetchBalance} />\n          </main>\n        </Container>\n      ) : (\n        <Cover\n          name={\"Medium Dapp\"}\n          coverImg={\n            \"https://play-lh.googleusercontent.com/hB9t3Z-mi284_49HA3nAuhO-W5Cyhje7r2P9McdgORoVCd-0SV54c12NMQWLHnqALw\"\n          }\n          connect={connectWallet}\n        />\n      )}\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import algosdk from \"algosdk\";\nimport {\n  algodClient,\n  indexerClient,\n  minRound,\n  myAlgoConnect,\n  numGlobalBytes,\n  numGlobalInts,\n  numLocalBytes,\n  numLocalInts,\n  blogDappNote,\n} from \"./constants\";\n/* eslint import/no-webpack-loader-syntax: off */\nimport approvalProgram from \"!!raw-loader!../contracts/blog_contract_approval.teal\";\nimport clearProgram from \"!!raw-loader!../contracts/blog_contract_clear.teal\";\nimport { base64ToUTF8String, utf8ToBase64String } from \"./conversions\";\n\nclass Blog {\n  constructor(title, image, content, upvote, downvote, appId, owner) {\n    this.title = title;\n    this.image = image;\n    this.content = content;\n    this.upvote = upvote;\n    this.downvote = downvote;\n    this.appId = appId;\n    this.owner = owner;\n  }\n}\n\n// Compile smart contract in .teal format to program\nconst compileProgram = async (programSource) => {\n  let encoder = new TextEncoder();\n  let programBytes = encoder.encode(programSource);\n  let compileResponse = await algodClient.compile(programBytes).do();\n  return new Uint8Array(Buffer.from(compileResponse.result, \"base64\"));\n};\n\n// CREATE BLOG: ApplicationCreateTxn\nexport const createBlogAction = async (senderAddress, blog) => {\n  console.log(\"Adding blog...\");\n\n  let params = await algodClient.getTransactionParams().do();\n\n  // Compile programs\n  const compiledApprovalProgram = await compileProgram(approvalProgram);\n  const compiledClearProgram = await compileProgram(clearProgram);\n\n  // Build note to identify transaction later and required app args as Uint8Arrays\n  let note = new TextEncoder().encode(blogDappNote);\n  let title = new TextEncoder().encode(blog.title);\n  let image = new TextEncoder().encode(blog.image);\n  let content = new TextEncoder().encode(blog.content);\n\n  let appArgs = [title, image, content];\n\n  // Create ApplicationCreateTxn\n  let txn = algosdk.makeApplicationCreateTxnFromObject({\n    from: senderAddress,\n    suggestedParams: params,\n    onComplete: algosdk.OnApplicationComplete.NoOpOC,\n    approvalProgram: compiledApprovalProgram,\n    clearProgram: compiledClearProgram,\n    numLocalInts: numLocalInts,\n    numLocalByteSlices: numLocalBytes,\n    numGlobalInts: numGlobalInts,\n    numGlobalByteSlices: numGlobalBytes,\n    note: note,\n    appArgs: appArgs,\n  });\n\n  // Get transaction ID\n  let txId = txn.txID().toString();\n\n  // Sign & submit the transaction\n  let signedTxn = await myAlgoConnect.signTransaction(txn.toByte());\n  console.log(\"Signed transaction with txID: %s\", txId);\n  await algodClient.sendRawTransaction(signedTxn.blob).do();\n\n  // Wait for transaction to be confirmed\n  let confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId, 4);\n\n  // Get the completed Transaction\n  console.log(\n    \"Transaction \" +\n      txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n\n  // Get created application id and notify about completion\n  let transactionResponse = await algodClient\n    .pendingTransactionInformation(txId)\n    .do();\n  let appId = transactionResponse[\"application-index\"];\n  console.log(\"Created new app-id: \", appId);\n  return appId;\n};\n\n// Edit BLOG: Group transaction consisting of ApplicationCallTxn\nexport const editAction = async (senderAddress, blog) => {\n  console.log(\"Edit blog...\");\n\n  let params = await algodClient.getTransactionParams().do();\n\n  // Build required app args as Uint8Array\n  let editArg = new TextEncoder().encode(\"edit\");\n  let title = new TextEncoder().encode(blog.title);\n  let image = new TextEncoder().encode(blog.image);\n  let content = new TextEncoder().encode(blog.content);\n  let appArgs = [editArg, title, image, content];\n\n  // Create ApplicationCallTxn\n  let appCallTxn = algosdk.makeApplicationCallTxnFromObject({\n    from: senderAddress,\n    appIndex: blog.appId,\n    onComplete: algosdk.OnApplicationComplete.NoOpOC,\n    suggestedParams: params,\n    appArgs: appArgs,\n  });\n\n  let txnArray = [appCallTxn];\n\n  // Create group transaction out of previously build transactions\n  let groupID = algosdk.computeGroupID(txnArray);\n  for (let i = 0; i < 1; i++) txnArray[i].group = groupID;\n\n  // Sign & submit the group transaction\n  let signedTxn = await myAlgoConnect.signTransaction(\n    txnArray.map((txn) => txn.toByte())\n  );\n  console.log(\"Signed group transaction\");\n  let tx = await algodClient\n    .sendRawTransaction(signedTxn.map((txn) => txn.blob))\n    .do();\n\n  // Wait for group transaction to be confirmed\n  let confirmedTxn = await algosdk.waitForConfirmation(algodClient, tx.txId, 4);\n\n  // Notify about completion\n  console.log(\n    \"Group transaction \" +\n      tx.txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n};\n\n// UPVOTE BLOG: Group transaction consisting of ApplicationCallTxn and PaymentTxn\nexport const upvoteAction = async (senderAddress, blog) => {\n  console.log(\"Upvote blog...\");\n\n  let params = await algodClient.getTransactionParams().do();\n\n  // Build required app args as Uint8Array\n  let upvoteArg = new TextEncoder().encode(\"upvote\");\n\n  let appArgs = [upvoteArg];\n\n  // Create ApplicationCallTxn\n  let appCallTxn = algosdk.makeApplicationCallTxnFromObject({\n    from: senderAddress,\n    appIndex: blog.appId,\n    onComplete: algosdk.OnApplicationComplete.NoOpOC,\n    suggestedParams: params,\n    appArgs: appArgs,\n  });\n\n  let txnArray = [appCallTxn];\n\n  // Create group transaction out of previously build transactions\n  let groupID = algosdk.computeGroupID(txnArray);\n  for (let i = 0; i < 1; i++) txnArray[i].group = groupID;\n\n  // Sign & submit the group transaction\n  let signedTxn = await myAlgoConnect.signTransaction(\n    txnArray.map((txn) => txn.toByte())\n  );\n  console.log(\"Signed group transaction\");\n  let tx = await algodClient\n    .sendRawTransaction(signedTxn.map((txn) => txn.blob))\n    .do();\n\n  // Wait for group transaction to be confirmed\n  let confirmedTxn = await algosdk.waitForConfirmation(algodClient, tx.txId, 4);\n\n  // Notify about completion\n  console.log(\n    \"Group transaction \" +\n      tx.txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n};\n\n// DOWNVOTE BLOG: Group transaction consisting of ApplicationCallTxn and PaymentTxn\nexport const downvoteAction = async (senderAddress, blog) => {\n  console.log(\"downvote blog...\");\n\n  let params = await algodClient.getTransactionParams().do();\n\n  // Build required app args as Uint8Array\n  let downvoteArg = new TextEncoder().encode(\"downvote\");\n\n  let appArgs = [downvoteArg];\n\n  // Create ApplicationCallTxn\n  let appCallTxn = algosdk.makeApplicationCallTxnFromObject({\n    from: senderAddress,\n    appIndex: blog.appId,\n    onComplete: algosdk.OnApplicationComplete.NoOpOC,\n    suggestedParams: params,\n    appArgs: appArgs,\n  });\n\n  let txnArray = [appCallTxn];\n\n  // Create group transaction out of previously build transactions\n  let groupID = algosdk.computeGroupID(txnArray);\n  for (let i = 0; i < 1; i++) txnArray[i].group = groupID;\n\n  // Sign & submit the group transaction\n  let signedTxn = await myAlgoConnect.signTransaction(\n    txnArray.map((txn) => txn.toByte())\n  );\n  console.log(\"Signed group transaction\");\n  let tx = await algodClient\n    .sendRawTransaction(signedTxn.map((txn) => txn.blob))\n    .do();\n\n  // Wait for group transaction to be confirmed\n  let confirmedTxn = await algosdk.waitForConfirmation(algodClient, tx.txId, 4);\n\n  // Notify about completion\n  console.log(\n    \"Group transaction \" +\n      tx.txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n};\n\n// DELETE BLOG: ApplicationDeleteTxn\nexport const deleteAction = async (senderAddress, index) => {\n  console.log(\"Deleting application...\");\n\n  let params = await algodClient.getTransactionParams().do();\n\n  // Create ApplicationDeleteTxn\n  let txn = algosdk.makeApplicationDeleteTxnFromObject({\n    from: senderAddress,\n    suggestedParams: params,\n    appIndex: index,\n  });\n\n  // Get transaction ID\n  let txId = txn.txID().toString();\n\n  // Sign & submit the transaction\n  let signedTxn = await myAlgoConnect.signTransaction(txn.toByte());\n  console.log(\"Signed transaction with txID: %s\", txId);\n  await algodClient.sendRawTransaction(signedTxn.blob).do();\n\n  // Wait for transaction to be confirmed\n  const confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId, 4);\n\n  // Get the completed Transaction\n  console.log(\n    \"Transaction \" +\n      txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n\n  // Get application id of deleted application and notify about completion\n  let transactionResponse = await algodClient\n    .pendingTransactionInformation(txId)\n    .do();\n  let appId = transactionResponse[\"txn\"][\"txn\"].apid;\n  console.log(\"Deleted app-id: \", appId);\n};\n\n// GET BLOGS: Use indexer\nexport const getBlogsAction = async () => {\n  console.log(\"Fetching blog...\");\n  let note = new TextEncoder().encode(blogDappNote);\n  let encodedNote = Buffer.from(note).toString(\"base64\");\n\n  // Step 1: Get all transactions by notePrefix (+ minRound filter for performance)\n  let transactionInfo = await indexerClient\n    .searchForTransactions()\n    .notePrefix(encodedNote)\n    .txType(\"appl\")\n    .minRound(minRound)\n    .do();\n  let blogs = [];\n  for (const transaction of transactionInfo.transactions) {\n    let appId = transaction[\"created-application-index\"];\n    if (appId) {\n      // Step 2: Get each application by application id\n      let blog = await getApplication(appId);\n      if (blog) {\n        blogs.push(blog);\n      }\n    }\n  }\n  console.log(\"Blog fetched.\");\n  return blogs;\n};\n\nconst getApplication = async (appId) => {\n  try {\n    // 1. Get application by appId\n    let response = await indexerClient\n      .lookupApplications(appId)\n      .includeAll(true)\n      .do();\n    if (response.application.deleted) {\n      return null;\n    }\n    let globalState = response.application.params[\"global-state\"];\n\n    // 2. Parse fields of response and return product\n    let owner = response.application.params.creator;\n    let title = \"\";\n    let image = \"\";\n    let content = \"\";\n    let upvote = 0;\n    let downvote = 0;\n\n    const getField = (fieldName, globalState) => {\n      return globalState.find((state) => {\n        return state.key === utf8ToBase64String(fieldName);\n      });\n    };\n\n    if (getField(\"TITLE\", globalState) !== undefined) {\n      let field = getField(\"TITLE\", globalState).value.bytes;\n      title = base64ToUTF8String(field);\n    }\n\n    if (getField(\"IMAGE\", globalState) !== undefined) {\n      let field = getField(\"IMAGE\", globalState).value.bytes;\n      image = base64ToUTF8String(field);\n    }\n\n    if (getField(\"CONTENT\", globalState) !== undefined) {\n      let field = getField(\"CONTENT\", globalState).value.bytes;\n      content = base64ToUTF8String(field);\n    }\n\n    if (getField(\"UPVOTE\", globalState) !== undefined) {\n      upvote = getField(\"UPVOTE\", globalState).value.uint;\n    }\n\n    if (getField(\"DOWNVOTE\", globalState) !== undefined) {\n      downvote = getField(\"DOWNVOTE\", globalState).value.uint;\n    }\n\n    return new Blog(title, image, content, upvote, downvote, appId, owner);\n  } catch (err) {\n    return null;\n  }\n};\n","import algosdk from \"algosdk\";\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\n\nconst config = {\n    algodToken: \"\",\n    algodServer: \"https://node.testnet.algoexplorerapi.io\",\n    algodPort: \"\",\n    indexerToken: \"\",\n    indexerServer: \"https://algoindexer.testnet.algoexplorerapi.io\",\n    indexerPort: \"\",\n}\n\nexport const algodClient = new algosdk.Algodv2(config.algodToken, config.algodServer, config.algodPort)\n\nexport const indexerClient = new algosdk.Indexer(config.indexerToken, config.indexerServer, config.indexerPort);\n\nexport const myAlgoConnect = new MyAlgoConnect();\n\nexport const minRound = 21540981;\n\n// https://github.com/algorandfoundation/ARCs/blob/main/ARCs/arc-0002.md\nexport const blogDappNote = \"blog-dapp:uv2\"\n\n// Maximum local storage allocation, immutable\nexport const numLocalInts = 0;\nexport const numLocalBytes = 0;\n// Maximum global storage allocation, immutable\nexport const numGlobalInts = 2; // Global variables stored as Int: count, sold\nexport const numGlobalBytes = 3; // Global variables stored as Bytes: name, description, image\n\nexport const ALGORAND_DECIMALS = 6;"],"sourceRoot":""}